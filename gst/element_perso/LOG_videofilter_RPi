#### RPi element perso basé sur template videofilter pour dropper des frames

## Génération fichier in rpicamsrc
gst-launch-1.0 -e rpicamsrc ! 'video/x-raw,width=640,height=480,format=BGR,framerate=30/1' ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! filesink location=in.h264

## Cut
gst-launch-1.0 filesrc location=in.h264 ! h264parse ! v4l2h264dec ! mydropframes start-frame=200 end-frame=300 ! videoconvert ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4



## Génerer un fichier de départ videotestsrc 

# Caractéristiques par défaut (sans capsfilter)
gst-launch-1.0 videotestsrc num-buffers=100 ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=in.mp4

# 640x480 encapsulé (attention a déjà planté une fois, je suppose que l'encodeur a du mal à suivre sans is-live
gst-launch-1.0 videotestsrc num-buffers=100 ! video/x-raw,width=640,height=480 ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=in.mp4
gst-launch-1.0 videotestsrc num-buffers=2000 ! video/x-raw,width=640,height=480 ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=in.mp4

# Format detection-friendly (opencv): format=BGR,width=640,height=480 non encapsulé (si encapsulation + format set le décode plante)
gst-launch-1.0 videotestsrc num-buffers=100 ! 'video/x-raw,width=640,height=480,format=BGR' ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! filesink location=in.h264




## Decode + réencode pour drop unwanted frames

# sans élément perso, sur un fichier in au format par défaut (dans ce cas encapsulation in OK)
gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! v4l2h264dec ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4

# sur un .h264 BGR 640x480 (non encapsulé + videoconvert both mandatory)
gst-launch-1.0 filesrc location=in.h264 ! h264parse ! v4l2h264dec ! videoconvert ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4

# Sur BGR 640x480 element qui drop frames au milieu
gst-launch-1.0 filesrc location=in.h264 ! h264parse ! v4l2h264dec ! mydropframes start-frame=30 end-frame=70 ! videoconvert ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4






## Recette initiale de génération de l'élément (un .so) 
cd /initrd/mnt/dev_save/packages/gst-plugins-bad-1.18.1/tools/
./gst-element-maker my_drop_frames videofilter

--> gstmydropframes.[c,h] symlinks depuis github video/gst/element_perso/




## X compil (peut se faire dans n'importe quel dir)
export PATH=$PATH:/initrd/mnt/dev_save/rpi/cross/bin/
export PKG_CONFIG_LIBDIR=/initrd/mnt/dev_save/rpi/cross/aarch64-linux-gnu/lib/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=/initrd/mnt/dev_save/rpi/cross/aarch64-linux-gnu

aarch64-linux-gnu-gcc -Wall -Werror -fPIC $(pkg-config --cflags gstreamer-1.0 gstreamer-video-1.0) -c -o gstmydropframes.o gstmydropframes.c
aarch64-linux-gnu-gcc -shared -o gstmydropframes.so gstmydropframes.o $(pkg-config --libs gstreamer-1.0 gstreamer-video-1.0)

#push vers le RPi
scp gstmydropframes.so p:/lib/gstreamer-1.0/



#Je place mon element entre le decodeur et l'encodeur
GST_DEBUG=mydropframes:7 gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! v4l2h264dec ! mydropframes ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4

Génère un fichier out.mp4, de la bonne taille, vert (vide) quand je ne copy pas les frames. 


## Element qui prend les properties start-frame et end-frame

#La pipeline pour l'élément avec les properties start-frame et end-frame set
GST_DEBUG=mydropframes:7 gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! v4l2h264dec ! mydropframes start-frame=30 end-frame=70 \
! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4
