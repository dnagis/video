###Objectif de départ: un element fait à partir du template videofilter pour aller vers videorate
##(avec la notion que videofilter et videorate héritent d'une classe basetransform)



##Stratégie initiale:
#Créer un element perso à partir du template videofilter
#Le faire fonctionner entre un décodeur et un encodeur pour qu'il traite les frames en raw une par une
#Essai Piste: valeur retournée par videorate dans la fonction gst_video_rate_transform_ip() GST_BASE_TRANSFORM_FLOW_DROPPED





##LOG
## Créer un element perso à partir du template videofilter
--> sed de chez GNU cf LOG_element_perso_main
--> gst-plugins-bad/tools --> ./gst-element-maker my_element videofilter
--> le voir fonctionner:
export GST_PLUGIN_PATH=/initrd/mnt/dev_save/packages/gst-plugins-bad-1.18.1/tools
gst-launch-1.0 videotestsrc is-live=true ! myelement ! fakesink

## Le faire fonctionner entre un décodeur et un encodeur pour qu'il traite les raw frames une par une

-Créer un fichier video avec 300 buffers
gst-launch-1.0 videotestsrc num-buffers=100 ! vaapih264enc ! h264parse ! mp4mux ! filesink location=in.mp4

-Une pipeline qui décode et réencode 
gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! vaapih264enc ! h264parse ! mp4mux ! filesink location=out.mp4

-La même pipeline avec mon element au milieu
export GST_PLUGIN_PATH=/initrd/mnt/dev_save/packages/gst-plugins-bad-1.18.1/tools
gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! myelement ! vaapih264enc ! h264parse ! mp4mux ! filesink location=out.mp4

--> not linked
--> j'essaie d'ajouter les elements un par un
bloque à partir de: vaapih264enc derrière myelement

j'essaie d'ajouter queue : entre myelement et encodeur: non

--> est ce que videorate à la place de mon element fonctionne?
gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! videorate ! vaapih264enc ! h264parse ! mp4mux ! filesink location=out.mp4
oui

-->  -vvvv n'est pas informatif, je n'ai pas not negotiated

--> est ce que le format qui sort de mon element convient à vaapih264enc?

--> j'essaie fakesrc ! myelement ! vaapih264enc ! fakesink

gst-launch-1.0 -vvvv fakesrc ! myelement ! vaapih264enc ! fakesink

streaming stopped, reason not-negotiated (-4), et -vvvv ne montre rien



gst-launch-1.0 videotestsrc is-live=true ! vaapih264enc ! fakesink
--> OK

gst-launch-1.0 fakesrc ! vaapih264enc ! fakesink
--> streaming stopped, reason not-negotiated (-4)

--> donc il ne semble ***pas utile d'essayer de mettre fakesrc en amont de vaapih264enc ça ne marchera pas***




--> ce serait donc un problème entre mon element et vaapih264enc, un queue qq part n'amènera rien (la première erreur aurait pu laisser supposer que queue qq part aiderait: 
"Delayed linking failed .. "
mais visiblement c'est l'erreur "streaming stopped, reason not-linked (-1)" de la première pipeline qui était plus informative






#Si j'essaie d'analyser une situation où le link avec qq chose qui linke en amont vaapih264enc fonctionne

gst-launch-1.0 -vvvv videotestsrc is-live=true ! myelement ! vaapih264enc ! fakesink
--> Fail

Si je mets un element qui marche à la place de mon élément, et que je cherche quel format négocié (avec -vvvv)

gst-launch-1.0 -vvvv videotestsrc is-live=true ! videorate ! vaapih264enc ! fakesink

fonctionne avec le format négo = 
video/x-raw, width=(int)320, height=(int)240, framerate=(fraction)30/1, format=(string)NV12, multiview-mode=(string)mono, pixel-aspect-ratio=(fraction)1/1, interlace-mode=(string)progressive


Est ce qu'un videoconvert règle le pb de link mon element - vaapih264enc?
gst-launch-1.0 --gst-plugin-path=/initrd/mnt/dev_save/packages/gst-plugins-bad-1.18.1/tools fakesrc ! myelement ! videoconvert ! vaapih264enc ! fakesink
--> non --> streaming stopped, reason not-negotiated (-4)

-Formats: compatibilité?
gst-inspect-1.0 vaapih264enc --> prend 3 formats:  { (string)NV12, (string)YV12, (string)I420 }
le template de pads de mon element: #define VIDEO_SRC_CAPS GST_VIDEO_CAPS_MAKE("{ I420, Y444, Y42B, UYVY, RGBA }")

-Rationale: Il semble évident que mon élément ne peut pas convertir d'un format à un autre. Donc je me dis que peut être, il négocie avec son élément
en amont qq chose, et ensuite, comme il ne peut choisir autre chose en aval que ce qu'il a négocié en amont, il essaie un format qui ne convient 
pas à vaapih264enc.


-J'essaie de forcer un format avec un capsfilter entre videotestsrc et mon element

gst-launch-1.0 -vvvv videotestsrc is-live=true ! myelement ! fakesink
le format negocié entre videotestsrc et mon element: videotestsrc0.GstPad:src: caps = video/x-raw, format=(string)RGBA, width=(int)320, height=(int)240, framerate=(fraction)30/1, multiview-mode=(string)mono, pixel-aspect-ratio=(fraction)1/1, interlace-mode=(string)progressive

j'essaie d'insérer un capsfilter:

juste pour avoir la syntaxe:
video/x-raw,format=RGBA,width=320,height=200
gst-launch-1.0 -vvvv videotestsrc is-live=true ! video/x-raw,format=RGBA,width=320,height=200 ! myelement ! fakesink

essai format I420
gst-launch-1.0 -vvvv videotestsrc is-live=true ! video/x-raw,format=I420,width=320,height=200 ! myelement ! fakesink
--> OK (et l'output verbose -vvvv montre bien le format demandé=I420)

-Maintenant que j'ai un format qui, selon gst-inspect-1.0 vaapih264enc, devrait être compatible en entrée vaapih264enc, est ce que le link devient possible?
Déjà je vérifie que le capsfilter entre videotestsrc et vaapih264enc fonctionne

gst-launch-1.0 -vvvv videotestsrc is-live=true ! video/x-raw,format=I420,width=320,height=200 ! vaapih264enc ! fakesink
--> streaming stopped, reason not-negotiated (-4)

avec YV12 idem

gst-launch-1.0 -vvvv videotestsrc is-live=true ! video/x-raw,format=NV12,width=320,height=200 ! vaapih264enc ! fakesink
--> OK

Donc contrairement à ce que dit gst-inspect-1.0 vaapih264enc, le seul format que vaapih264enc accepte en entrée est NV12???

Si c'est bien le cas, normalement une conversion avant devrait marcher?

videoconvert ! video/x-raw,format=NV12

gst-launch-1.0 -vvvv videotestsrc is-live=true ! myelement ! videoconvert ! video/x-raw,format=NV12 ! vaapih264enc ! fakesink

--> OUI MARCHE

--> Donc la trouvaille ici c'est basé sur 2 notions importantes ("Mantras"):
	1-Un element perso fraichement créé à partir du template videofilter ne peut pas convertir d'un format à un autre (l'inverse aurait été étonnant, mais il m'a fallu du running espiguette pour le trouver...)
	2-vaapih264enc, contrairement à ce qu'il advertise avec gst-inspect, ne prend que NV12 en entrée
	
--> Maintenant il faut essayer de construire la pipeline avec décodage et encodage




## J'essaie de comprendre ce qui sort de mon element

#Si j'essaie avec videotestsrc j'ai des choses bizarres, écran vert, mais ce que je veux c'est partir d'un decode donc:

#decode ! myelement ! vaapisink 
gst-launch-1.0 -vvvv filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! myelement ! vaapisink
--> je vois la mire
--> le format négocié à partir de la sortie du décodeur = I420

#decode ! myelement ! convertir en NV12 ! filesink
gst-launch-1.0 -vvvv filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! myelement ! videoconvert ! video/x-raw,format=NV12 ! vaapih264enc ! filesink location=out.mp4
--> ne plante pas
--> out.mp4 pèse 2.5K (in.mp4 pèse 361.2K)
--> lecture gst-play: vert
vaapidecode_h264-0.GstPad:src: caps = video/x-raw, format=(string)I420,

myelement0.GstPad:sink: caps = video/x-raw, format=(string)I420,
myelement0.GstPad:src: caps = video/x-raw, format=(string)I420

videoconvert0.GstPad:sink: caps = video/x-raw, format=(string)I420, 
--> videoconvert.src le format est à la fin
videoconvert0.GstPad:src: caps = video/x-raw, width=(int)320, height=(int)240, interlace-mode=(string)progressive, multiview-mode=(string)mono, multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:/right-view-first/left-flipped/left-flopped/right-flipped/right-flopped/half-aspect/mixed-mono, pixel-aspect-ratio=(fraction)1/1, framerate=(fraction)30/1, format=(string)NV12

#Ce qui sort de myelement est affichable en vaapisink, mais si à la place de vaapisink je fais de la conversion et de l'encode j'ai du vert à la sortie de l'encodage

#Si derrière le decode ! myelement je sors du raw, est ce que je peux le lire?

gst-launch-1.0 -vvvv filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! myelement ! filesink location=out.raw

out.raw --> 11 Mo
l'output donne:
video/x-raw, format=(string)I420, width=(int)320, height=(int)240

gst-launch-1.0 -vvvv filesrc location=out.raw ! rawvideoparse use-sink-caps=false width=320 height=240 format=i420 ! vaapisink
ou
gst-launch-1.0 -vvvv filesrc location=out.raw ! queue ! "video/x-raw, width=320, height=240, format=I420, framerate=30/1" ! rawvideoparse use-sink-caps=true ! vaapisink
--> vert

si j'essaie de forcer le plus possible le format à la création du raw?
gst-launch-1.0 -vvvv filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! video/x-raw,format=I420 ! myelement ! video/x-raw,format=I420 ! filesink location=out.raw
--> vert à la lecture

Piste des caps autres que format width height: le -vvvv à la lecture en vaapisink montre d'autres propriétés 
interlace-mode=(string)progressive, multiview-mode=(string)mono, multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:/right-view-first/left-flipped/left-flopped/right-flipped/right-flopped/half-aspect/mixed-mono, pixel-aspect-ratio=(fraction)1/1, chroma-site=(string)jpeg, colorimetry=(string)bt601, framerate=(fraction)30/1

Quand je crée le .raw j'ai:
caps = video/x-raw, format=(string)I420, width=(int)320, height=(int)240, interlace-mode=(string)progressive, multiview-mode=(string)mono, multiview-flags=(GstVideoMultiviewFlagsSet)0:ffffffff:/right-view-first/left-flipped/left-flopped/right-flipped/right-flopped/half-aspect/mixed-mono, pixel-aspect-ratio=(fraction)1/1, chroma-site=(string)jpeg, colorimetry=(string)bt601, framerate=(fraction)30/1

Quand j'essaie de le lire je vois:
src: caps = video/x-raw, format=(string)I420, width=(int)320, height=(int)240, interlace-mode=(string)progressive, pixel-aspect-ratio=(fraction)1/1, chroma-site=(string)jpeg, colorimetry=(string)bt601, framerate=(fraction)0/1

Donc déjà il faut le bon framerate

gst-launch-1.0 -vvvv filesrc location=out.raw ! queue ! "video/x-raw, width=320, height=240, format=I420, framerate=30/1" ! rawvideoparse use-sink-caps=true ! vaapisink

j'essaie un autre format: pareil


## Dim 0503 je sors du raw de vaapih264dec que j'arrive à lire, pour l'instant sans mon element, en forçant I420 à la sortie:

gst-launch-1.0 -vvvv filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! "video/x-raw, width=320, height=240, format=I420, framerate=30/1" ! filesink location=out.raw

gst-launch-1.0 -vvvv filesrc location=out.raw ! queue ! "video/x-raw, width=320, height=240, format=I420, framerate=30/1" ! rawvideoparse use-sink-caps=true ! vaapisink

Si je fais la même chose avec du format NV12: le fichier n'est pas lisible (enfin: lisible garbled en I420, et erreurs vaapisink/xvimagesink en lecture NV12)













#Essais initiaux avec videotestsrc et pas filesrc, à ranger ou jeter???

gst-launch-1.0 videotestsrc is-live=true ! myelement ! fakesink
--> OK (tourne)
gst-launch-1.0 videotestsrc is-live=true ! myelement ! vaapisink
apparait ***vert*** je ne vois pas la mire: mauvais format? ou vide???


gst-launch-1.0  videotestsrc is-live=true ! videorate ! vaapisink ou ximagesink
	ou
gst-launch-1.0  videotestsrc is-live=true ! videoconvert ! vaapisink ou ximagesink
	je vois la mire

si je remplace video[rate,convert] par mon element:

gst-launch-1.0 -vvvv videotestsrc is-live=true ! myelement ! vaapisink

-->apparait vert... mais avec la bonne taille, -vvvv me montre que le format négocié est:
-->video/x-raw, format=(string)I420, width=(int)320, height=(int)240, framerate=(fraction)30/1


(par contre avec ximagesink --> reason not-negotiated (-4))


-si vide, un fichier out.raw doit être quasi vide?
gst-launch-1.0  videotestsrc is-live=true ! videorate ! filesink location=out.raw
je laisse 3s: 60 Mo

gst-launch-1.0  videotestsrc is-live=true ! myelement ! filesink location=out.raw
je laisse 3s: 28Mo, donc n'est pas vide





