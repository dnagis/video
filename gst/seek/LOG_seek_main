### Objectif: utiliser le seek pour ne garder qu'une portion d'une video en input


## Création d'une video avec timeoverlay

NUC avec timeoverlay
gst-launch-1.0 videotestsrc num-buffers=100 ! timeoverlay ! vaapih264enc ! h264parse ! mp4mux ! filesink location=in.mp4


## Appli qui lit le fichier, décode, encode et filesink un fichier

Une pipeline qui fasse ce job:
gst-launch-1.0 filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! vaapih264enc ! h264parse ! mp4mux ! filesink location=out.mp4

# Création de la pipeline à partir d'une string type gst-launch (gst_parse_launch) basé sur hello_world
seek.c
gcc seek.c -o seek `pkg-config --cflags --libs gstreamer-1.0`
debug: GST_DEBUG=*:WARN ./seek

# Seeking

https://gstreamer.freedesktop.org/documentation/additional/design/seeking.html?gi-language=c

reference de la fonction gst_event_new_seek():
https://gstreamer.freedesktop.org/documentation/gstreamer/gstevent.html?gi-language=c#gst_event_new_seek

il faudrait envoyer gst_event_new_seek() à une bin:
https://github.com/GStreamer/gst-docs/blob/master/examples/tutorials/basic-tutorial-13.c#L30

si je gst_element_send_event() avant set_state() il ne se passe rien, si je le mets après plante

Le format serait en nanosecondes?
https://gstreamer.freedesktop.org/documentation/gstreamer/gstformat.html?gi-language=c#GstFormat


# A ce stade je n'ai aucun effet de ma demande de seek, où que je la place, mon hypothèse est qu'il faut une boucle d'écoute du bus comme dans:

https://gstreamer.freedesktop.org/documentation/tutorials/basic/time-management.html?gi-language=c

Ref fonctions pour écouter bus
https://gstreamer.freedesktop.org/documentation/gstreamer/gstbus.html?gi-language=c#gst_bus_pop


J'arrive à déclencher mon premier seek en placant gst_element_send_event() à la réception d'un msg qui dit que state passé de PAUSED à PLAYING

Fonctionne sur une playbin (comme dans les exemples), et sur une pipeline (string classique) passée à gst_parse_launch() 

Pb1: fichier mp4 illisible (fait penser à une capture forced stop donc un pb d'encapsulation)

Pb2: Le loop pour écouter le msg bus fait tourner le CPU... Pas envie de régler ce problème tant que le problème principal n'est pas résolu.

Pb1: Fichier out illisible, si c'est bien un pb d'encapsulation, la taille doit augmenter si je demande une durée plus grande

Si je demande 1s, 115Ko si je demande 2s j'ai 225Ko --> OK ça sent le pb d'encapsulation


pipeline sans encapsuler (du .h264)

filesrc location=in.mp4 ! qtdemux ! h264parse ! vaapih264dec ! vaapih264enc ! filesink location=out.h264

--> OK


##Cross - compil

export PATH=$PATH:/initrd/mnt/dev_save/rpi/cross/bin/
export PKG_CONFIG_LIBDIR=/initrd/mnt/dev_save/rpi/cross/aarch64-linux-gnu/lib/pkgconfig
export PKG_CONFIG_SYSROOT_DIR=/initrd/mnt/dev_save/rpi/cross/aarch64-linux-gnu

sur le hello_world.c dans le dir above, avec une pipeline simple videotestsrc ! encode ! mp4


gst_parse_launch("videotestsrc num-buffers=100 ! v4l2h264enc ! video/x-h264,level=(string)3 ! h264parse ! mp4mux ! filesink location=test_in_app.mp4

***attention avec  v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! ...*** ---> plante au runtime (uri invalid)

aarch64-linux-gnu-gcc seek.c -o seek `pkg-config --cflags --libs gstreamer-1.0`





#Recherche d'une pipeline qui lit decode et réencode sur le RPi pour l'intégrer dans l'app

voir LOG_v4l2h264dec (format pas RGB sinon décodeur plante)
gst-launch-1.0 videotestsrc num-buffers=100 ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=video.mp4

#décode + réencode
gst-launch-1.0 filesrc location=video.mp4 ! qtdemux ! h264parse ! v4l2h264dec ! v4l2h264enc ! 'video/x-h264,level=(string)3' ! h264parse ! mp4mux ! filesink location=out.mp4


--> seek.c avec cette pipeline intégrée plante
