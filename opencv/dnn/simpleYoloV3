#!/usr/bin/python

#Travail sur output YOLOv3, basé sur HelloYoloV3 dans mon dossier


import cv2 as cv
import numpy as np
import time
import sys

WHITE = (255, 255, 255)
img = None
img0 = None
outputs = None

#PATH prepended aux fichiers weight, config, class names...
PATH='/initrd/mnt/dev_save/packages/cv_dnn_data/detection/yolov3-opencv/'

# Load names of classes and get random colors
#J'ai pris le fichier de noms de classes:dans les sources openCV dans opencv-4.6.0/samples/data/dnn/
classes = open(PATH+'object_detection_classes_yolov3.txt').read().strip().split('\n')
np.random.seed(42)
colors = np.random.randint(0, 255, size=(len(classes), 3), dtype='uint8')

# Give the configuration and weight files for the model and load the network.
net = cv.dnn.readNetFromDarknet(PATH+'yolov3.cfg', PATH+'yolov3.weights') #
net.setPreferableBackend(cv.dnn.DNN_BACKEND_OPENCV)
# net.setPreferableTarget(cv.dnn.DNN_TARGET_CPU)

# determine the output layer
ln = net.getLayerNames()
#print(len(ln), ln) #len=254

ln = [ln[i - 1] for i in net.getUnconnectedOutLayers()]

IMAGE_FILE = sys.argv[1]


img = cv.imread(IMAGE_FILE)

blob = cv.dnn.blobFromImage(img, 1/255.0, (416, 416), swapRB=True, crop=False)

net.setInput(blob)

#Premier résultat: 3 groupes selon taille
outputs = net.forward(ln)


# combine ("aplatir") the 3 outputs groups into 1 (10647, 85)
# large objects (507, 85)
# medium objects (2028, 85)
# small objects (8112, 85)
outputs = np.vstack(outputs)

#print("np.shape(outputs):", np.shape(outputs)) #(10647, 85)
#print(outputs[0]) #voir un exemple


for output in outputs:
	scores = output[5:] #pour chaque array de len=85, on récupère à partir de l'index 5
	classID = np.argmax(scores) #des 80 classes (object_detection_classes_yolov3.txt) celle qui a la valeur max
	confidence = scores[classID] #La confidence est la valeur à l'index de la classID
	
	#classID == 0 --> class = "person". 
	if ((classID==0) and (confidence>0.9)):		
		print("person CI=", confidence)









