#!/usr/bin/python

#Passer une vidéo en Yolo: basé sur simpleYolo

#Usage: videoYolo CI [t] video_file


#Plot les results: 
#gnuplot 5.4 patchlevel 4 (gnuplot-5.4.4.tar.gz)
#gnuplot -e "plot 'detect.txt' with impulses lw 1; pause -1"
#
#gnuplot output to file
#gnuplot -e "set terminal pngcairo; plot 'detect.txt' with impulses lw 1;" > output.png


import cv2 as cv
import numpy as np
import sys

WHITE = (255, 255, 255)

FRAME_SKIPPER = 30 #mécanisme pour ne traiter qu'une partie des frames


#Parsing des arguments
if len(sys.argv) < 3:
    print("Mauvais nombre d args Usage:  videoYolo CI_threshold file")
    sys.exit(1)
    
#print("n args=", len(sys.argv))

conf_threshold = float(sys.argv[1]) #premier argument = CI

VIDEO_FILE = sys.argv[len(sys.argv)-1]
print("fichier video = ", VIDEO_FILE)


if sys.argv[2] == "t":
	print("Detection par tiny-yolo")
	#PPATH prepended aux fichiers weight, config, class names...
	PPATH='/initrd/mnt/dev_save/packages/cv_dnn_data/detection/yolov3-tiny/'
	CONFIG_FILE=PPATH+'yolov3-tiny.cfg'
	WEIGHT_FILE=PPATH+'yolov3-tiny.weights'
else:
	print("Detection par regular yolo")
	#PPATH prepended aux fichiers weight, config, class names...
	PPATH='/initrd/mnt/dev_save/packages/cv_dnn_data/detection/yolov3-opencv/'
	CONFIG_FILE=PPATH+'yolov3.cfg'
	WEIGHT_FILE=PPATH+'yolov3.weights'




#Fichier des résultats détection
output_file = open('detect.txt', 'w')





#Préparation Yolo
classes = open(PPATH+'object_detection_classes_yolov3.txt').read().strip().split('\n')
np.random.seed(42)
colors = np.random.randint(0, 255, size=(len(classes), 3), dtype='uint8')
net = cv.dnn.readNetFromDarknet(CONFIG_FILE, WEIGHT_FILE) 
net.setPreferableBackend(cv.dnn.DNN_BACKEND_OPENCV)
ln = net.getLayerNames()
ln = [ln[i - 1] for i in net.getUnconnectedOutLayers()]


#Yolo detection sur une frame
def do_detection(frame):
	detected = 0
	blob = cv.dnn.blobFromImage(frame, 1/255.0, (416, 416), swapRB=True, crop=False)
	net.setInput(blob)
	outputs = net.forward(ln)
	outputs = np.vstack(outputs)
	for output in outputs:
		scores = output[5:] #pour chaque array de len=85, on récupère à partir de l'index 5
		classID = np.argmax(scores) #des 80 classes (object_detection_classes_yolov3.txt) celle qui a la valeur max
		confidence = scores[classID] #La confidence est la valeur à l'index de la classID
		
		#classID == 0 --> class = "person". 
		if ((classID==0) and (confidence > conf_threshold)):
			detected = 1		
			#print("frame n°=", pos_frames, " person CI=", confidence)	
	
	#print("frame n°=", pos_frames, "  detected=", detected)

	return detected
	



cap = cv.VideoCapture(VIDEO_FILE)

#une list est faite pour append, numpy marche mal comme ça
results_list = []

while cap.isOpened():
	ret, frame = cap.read()
	pos_frames=int(cap.get(cv.CAP_PROP_POS_FRAMES))
	pos_time=round(int(cap.get(cv.CAP_PROP_POS_MSEC))/1000)
	# if frame is read correctly ret is True
	if not ret:
		print("Can't receive frame (stream end?). Exiting ...")
		break

	#check divisibility par ce qui est après le "%", permet de skipper des frames
	if (pos_frames%FRAME_SKIPPER == 0): 
		result = do_detection(frame)
		print("Pos s = ", pos_time, " frame n°=", pos_frames, "  detected=", result)
		output_file.write(str(pos_time) + ' ' + str(result) + '\n')
		results_list.append(result)
		
	if cv.waitKey(33) == ord('q'):
		break

numpy_array_results = np.array(results_list) 


#Saving the array au format numpy sera ouvert avec read = np.fromfile('results_numpy.npy', dtype=int)
#numpy_array_results.tofile('results_numpy.npy')

print("Array de résultats: ", numpy_array_results)

print("last pos_time: ", pos_time, "last pos_frames: ", pos_frames) 
        
cap.release()
cv.destroyAllWindows()














